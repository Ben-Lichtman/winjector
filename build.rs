fn main() {
	windows::build! {
		Windows::{
			System::ProcessorArchitecture,
			Win32::{
				Foundation::{
					CloseHandle,
					BOOL,
					FILETIME,
					HANDLE,
					HINSTANCE,
					LRESULT,
					PSTR,
				},
				System::{
					Diagnostics::{
						Debug::{
							FlushInstructionCache,
							GetThreadContext,
							InitializeContext,
							ReadProcessMemory,
							SetThreadContext,
							WriteProcessMemory,
						},
						ToolHelp::{
							CreateToolhelp32Snapshot,
							Thread32First,
							Thread32Next,
							Toolhelp32ReadProcessMemory,
							CREATE_TOOLHELP_SNAPSHOT_FLAGS,
							THREADENTRY32,
						},
					},
					LibraryLoader::GetProcAddress,
					Memory::{
						VirtualAlloc2,
						VirtualAllocEx,
						VirtualFreeEx,
						VirtualProtectEx,
						VirtualQueryEx,
						PAGE_TYPE,
						VIRTUAL_ALLOCATION_TYPE,
						VIRTUAL_FREE_TYPE,
					},
					ProcessStatus::{
						K32EnumProcessModulesEx,
						K32EnumProcesses,
						K32GetModuleBaseNameA,
						K32GetModuleFileNameExA,
						K32GetModuleInformation,
						LIST_MODULES_32BIT,
						LIST_MODULES_64BIT, LIST_MODULES_DEFAULT, MODULEINFO,
					},
					SystemInformation::{
						GetSystemInfo,
						SYSTEM_INFO
					},
					SystemServices::MEMORY_BASIC_INFORMATION,
					Threading::{
						CreateRemoteThreadEx,
						GetCurrentProcess,
						GetExitCodeThread,
						GetProcessId,
						GetThreadTimes,
						InitializeProcThreadAttributeList,
						OpenProcess,
						OpenThread,
						ResumeThread,
						SuspendThread,
						WaitForSingleObjectEx,
						LPPROC_THREAD_ATTRIBUTE_LIST,
						PROCESS_ACCESS_RIGHTS,
						THREAD_CREATION_FLAGS,
						WAIT_RETURN_CAUSE,
					},
				},
				UI::WindowsAndMessaging::{
					EnumChildWindows,
					EnumThreadWindows,
					GetClassNameA,
					GetWindowTextA,
					SendMessageA,
					WNDENUMPROC,
				},
			}
		}
	};
}
